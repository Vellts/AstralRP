local screenW, screenH = guiGetScreenSize();
local screenScale = math.min(math.max(screenH / 768, 0.70), 2); -- Caso o painel seja muito grande, retirar o limite e deixar apenas o (screenH / 768).

parentW, parentH = (328.38 * screenScale), (210.25 * screenScale); -- Comprimento e Largura do painel.
parentX, parentY = ((screenW - parentW) / 2), ((screenH - parentH) / 2); -- Posição X e Y do painel.

local function respX (x)
    return (parentX + (x * screenScale));
end
    
local function respY (y)
    return (parentY + (y * screenScale));
end
    
local function respC (scale)
    return (scale * screenScale);
end

local _dxDrawText = dxDrawText;
local function dxDrawText(text, x, y, width, height, ...)
    return _dxDrawText(text, respX(x), respY(y+(animationY or 0)), (respX(x) + respC(width)), (respY(y+(animationY or 0)) + respC(height)), ...);
end

local _dxDrawRectangle = dxDrawRectangle;
local function dxDrawRectangle(x, y, width, height, ...)
    if y == 46 then
        return _dxDrawRectangle(respX(x), respY(y+(animationY or 0)), width, respC(height), ...);
    else
        return _dxDrawRectangle(respX(x), respY(y+(animationY or 0)), respC(width), respC(height), ...);
    end
end

local _dxDrawImage = dxDrawImage;
local function dxDrawImage(x, y, width, height, ...)
    return _dxDrawImage(respX(x), respY(y+(animationY or 0)), respC(width), respC(height), ...);
end

size = {}
local function dxDrawRounded (x, y, w, h, radius, ...)
    if not size[w..'.'..h..':'..radius] then
        local svg = string.format([[ <svg width='%s' height='%s' fill='none' xmlns='http://www.w3.org/2000/svg'> <mask id='path_inside' fill='#FFFFFF' > <rect width='%s' height='%s' rx='%s' /> </mask> <rect opacity='1' width='%s' height='%s' rx='%s' fill='#FFFFFF' stroke='%s' stroke-width='%s' mask='url(#path_inside)'/> </svg> ]], w, h, w, h, radius, w, h, radius, tostring(''), tostring(''))
        size[w..'.'..h..':'..radius] = svgCreate(w, h, svg)
    else
        dxDrawImage(x, y, w, h, size[w..'.'..h..':'..radius], 0, 0, 0, ...)
    end
end

local cursor = {}
local function isMouseInPosition (x, y, width, height)
    if (not cursor.state) then
        return false
    end
    if not (cursor.x and cursor.y) then
        return false;
    end
    x, y, width, height = respX(x), respY(y), respC(width), respC(height);
    return ((cursor.x >= x and cursor.x <= x + width) and (cursor.y >= y and cursor.y <= y + height));
end

local font = {}
local function getFont (name, size)
    if not font[name] then
        font[name] = {}
    end
    if not font[name][size] then
        font[name][size] = dxCreateFont('assets/fonts/'..name..'.ttf', respC(size/1.25))
    end
    return font[name][size]
end

local _svgCreate = svgCreate;
local function svgCreate (width, height, ...)
    return _svgCreate((width*2), (height*2), ...)
end

local svg = {

    ['joystick'] = svgCreate(26, 19,
        [[
            <svg width="26" height="19" viewBox="0 0 26 19" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M6.60998 0.0476882C5.89418 0.0725425 5.55616 0.107338 5.40206 0.162018C4.64649 0.445357 3.85613 1.43456 2.98623 3.17933C1.67392 5.81886 0.669804 9.16922 0.311902 12.1269C0.217456 12.9172 0.232369 14.6769 0.336757 15.2585C0.446116 15.8401 0.674775 16.541 0.87858 16.8939C1.25637 17.5501 1.93737 18.082 2.63827 18.2609C3.02599 18.3603 3.64238 18.3653 4.01519 18.2659C5.28276 17.9378 6.82373 16.4664 8.41938 14.0506L8.83693 13.4193H12.9478H17.0587L17.4067 13.9562C18.9974 16.3919 20.6179 17.9428 21.9103 18.2709C22.3626 18.3902 23.1033 18.3454 23.5606 18.1714C24.868 17.6744 25.5639 16.3273 25.6583 14.1152C25.7776 11.1973 24.5747 6.4601 22.8398 3.0302C22.0793 1.53398 21.3088 0.559687 20.6328 0.241552L20.2948 0.0824842L18.9477 0.0576299C17.3868 0.0327756 17.0438 0.0675716 16.5268 0.326056C16.1391 0.51992 15.6669 0.992152 15.5128 1.33017L15.4183 1.53895H12.9528H10.4873L10.3481 1.27052C10.1741 0.937472 9.72671 0.500036 9.37875 0.326056C8.8419 0.052659 8.2106 -0.0119621 6.60998 0.0476882ZM14.6827 3.23898C14.5683 3.45273 14.116 3.85537 13.8376 3.98958C13.2511 4.27789 12.6496 4.28286 12.068 3.99455C11.7946 3.86531 11.3224 3.44776 11.213 3.23898L11.1533 3.12962H12.9478H14.7423L14.6827 3.23898ZM7.52462 5.46095C7.79305 5.65482 7.84773 5.81886 7.86761 6.49489L7.88749 7.10631H8.46908C9.16998 7.10631 9.37378 7.19081 9.5577 7.55369C9.69689 7.83205 9.69689 7.97124 9.5577 8.24961C9.37378 8.61248 9.16998 8.69698 8.46908 8.69698H7.88749L7.86761 9.30343C7.84773 9.98444 7.79305 10.1485 7.51965 10.3473C7.28602 10.5113 6.82373 10.5113 6.60004 10.3423C6.33659 10.1435 6.28688 9.97449 6.28688 9.29846V8.69698H5.70529C5.21814 8.69698 5.0889 8.68207 4.91492 8.5926C4.34327 8.3192 4.32836 7.52883 4.88509 7.21567C5.05907 7.12122 5.15352 7.10631 5.6854 7.10631H6.28688V6.50483C6.28688 5.794 6.34653 5.62499 6.65472 5.4361C6.91321 5.27703 7.28105 5.28697 7.52462 5.46095ZM19.1962 5.39633C19.2906 5.44107 19.4199 5.56037 19.4895 5.65979C19.6585 5.90833 19.6635 6.46507 19.4945 6.71361C19.3354 6.95718 18.9725 7.12619 18.7041 7.08145C18.1374 6.98204 17.8441 6.20658 18.1672 5.6747C18.371 5.34165 18.8184 5.22235 19.1962 5.39633ZM17.6552 7.23555C17.9137 7.42941 17.9933 7.58848 17.9933 7.90165C17.9933 8.21481 17.9137 8.37388 17.6503 8.56774C17.5409 8.65225 17.4415 8.67213 17.1283 8.67213C16.7853 8.67213 16.7257 8.65722 16.5666 8.53792C16.1043 8.18498 16.159 7.47912 16.6611 7.20573C16.9146 7.07151 17.4514 7.08643 17.6552 7.23555ZM20.9807 7.20076C21.5723 7.46918 21.5623 8.31423 20.9708 8.59757C20.3693 8.89085 19.6585 8.51803 19.6585 7.91656C19.6585 7.58351 19.8573 7.28029 20.1556 7.16099C20.3594 7.08145 20.762 7.10134 20.9807 7.20076ZM19.236 8.84114C19.5044 8.99524 19.6088 9.21395 19.6088 9.61162C19.6088 9.9049 19.5889 9.99935 19.4895 10.1435C19.1713 10.6058 18.4555 10.6008 18.1672 10.1286C17.69 9.3432 18.4705 8.40867 19.236 8.84114Z" fill="white"/>
            </svg>
        ]]
    ),

    ['website'] = svgCreate(35, 34,
        [[
            <svg width="35" height="34" viewBox="0 0 35 34" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M13.9676 0.234997C10.4068 0.6081 7.35651 2.02851 4.92806 4.44386C3.72366 5.63517 2.93164 6.76103 2.1527 8.34508C1.20358 10.2826 0.751929 12.0761 0.666835 14.2035C0.431191 20.3367 4.14913 25.9857 9.90277 28.2439C11.5785 28.8985 13.2803 29.2127 15.1459 29.2192C16.8019 29.2192 18.2223 29.0032 19.61 28.5385C19.9242 28.4337 20.1926 28.3552 20.1991 28.3683C20.2122 28.3814 20.546 29.4156 20.9453 30.6723C21.3446 31.9291 21.7308 33.0484 21.8028 33.1597C22.2414 33.8077 23.2232 33.8797 23.7338 33.2972C23.8712 33.1401 24.2574 32.1582 25.1869 29.6185C25.8807 27.7072 26.4829 26.1166 26.5288 26.0773C26.568 26.0315 28.1455 25.4358 30.0372 24.7485C32.0926 23.9958 33.5588 23.4263 33.6897 23.3216C34.2592 22.8896 34.305 22.0321 33.7879 21.515C33.5326 21.2531 33.5719 21.2662 30.3973 20.2582C29.5398 19.9833 28.8197 19.7542 28.8132 19.7411C28.8001 19.7345 28.8787 19.4662 28.9899 19.152C29.2256 18.4516 29.4743 17.3388 29.5856 16.4944C29.71 15.5846 29.6903 13.6733 29.5529 12.7307C28.6299 6.36174 23.8385 1.46558 17.4696 0.379002C16.743 0.254634 14.6091 0.16954 13.9676 0.234997ZM14.5895 4.42422V7.47451L13.9873 7.42869C12.9007 7.35668 12.0825 7.26505 11.3166 7.12759C10.4984 6.98358 9.1762 6.68903 9.03874 6.61048C8.96674 6.57775 9.0322 6.40756 9.30057 5.88391C10.5246 3.51438 12.1479 1.98924 14.0004 1.46558C14.164 1.42631 14.3604 1.38049 14.4455 1.38049L14.5895 1.37394V4.42422ZM16.3241 1.46558C18.1503 1.95651 19.8325 3.54056 21.0369 5.897L21.397 6.59739L20.8864 6.73485C20.1991 6.91812 19.2762 7.1014 18.4187 7.22577C17.5677 7.35014 15.8462 7.48105 15.7611 7.42214C15.7284 7.4025 15.7022 6.1261 15.7022 4.3784V1.37394H15.8528C15.9313 1.37394 16.1473 1.41322 16.3241 1.46558ZM10.4592 2.40161C9.58858 3.30492 8.84237 4.36531 8.26635 5.51081C8.06998 5.90355 7.88671 6.21774 7.85398 6.21774C7.64452 6.21774 5.75282 5.32753 5.75282 5.22934C5.75282 5.0657 7.27796 3.84821 8.15508 3.31146C9.00601 2.79435 10.4395 2.10706 10.6948 2.09397C10.7275 2.09397 10.6228 2.23143 10.4592 2.40161ZM20.6049 2.47362C21.3184 2.78781 22.333 3.37037 23.0399 3.87439C23.5308 4.22131 24.6043 5.15079 24.6043 5.22934C24.6043 5.32098 22.6799 6.21774 22.4835 6.21774C22.4443 6.21774 22.2741 5.92318 22.1039 5.56972C21.7046 4.72533 20.8929 3.52747 20.1795 2.72235C19.5445 2.00233 19.538 2.00887 20.6049 2.47362ZM6.85249 7.03595C7.38269 7.25195 7.46124 7.30432 7.43505 7.42214C7.42196 7.50069 7.30414 7.89997 7.17323 8.31235C6.69539 9.88331 6.36811 11.6899 6.29611 13.2347L6.25683 14.138H4.01167H1.77305L1.80578 13.7256C1.99561 11.199 2.93164 8.73127 4.45678 6.68903L4.91497 6.08682L5.57609 6.44029C5.94264 6.63011 6.51866 6.90503 6.85249 7.03595ZM25.9397 6.75448C27.2488 8.5349 28.1063 10.6164 28.427 12.7765C28.4859 13.1561 28.5317 13.6209 28.5317 13.8042V14.138H26.3062H24.0807V13.7125C24.0807 12.1677 23.4719 8.9211 22.909 7.45487C22.8501 7.28468 22.8566 7.27814 23.2494 7.13413C23.6683 6.98358 25.1804 6.25047 25.2916 6.14573C25.3244 6.11301 25.3702 6.08682 25.3964 6.08682C25.4225 6.08682 25.6647 6.38792 25.9397 6.75448ZM9.4773 7.88034C10.937 8.24035 12.2592 8.43672 13.9218 8.54799L14.5895 8.58727V11.3626V14.138H10.9894H7.38923V13.6274C7.38923 12.3838 7.76888 10.1255 8.21399 8.67236C8.3449 8.24035 8.46927 7.83452 8.48236 7.76906C8.502 7.71015 8.52818 7.65778 8.54127 7.65778C8.54782 7.65778 8.97329 7.75597 9.4773 7.88034ZM22.0712 8.45636C22.6079 10.2761 22.9679 12.3903 22.9679 13.7256V14.138H19.3351H15.7022V11.3626V8.58727L16.4092 8.54145C18.0914 8.43672 19.9111 8.15526 21.2333 7.79524C21.4886 7.72324 21.7242 7.66433 21.7635 7.66433C21.8028 7.65778 21.9403 8.0178 22.0712 8.45636ZM6.28956 16.1802C6.37466 17.7839 6.69539 19.584 7.17323 21.1419C7.52015 22.2546 7.53979 22.1303 6.9834 22.3463C6.72158 22.4444 6.14556 22.7128 5.707 22.9419L4.90843 23.3477L4.44368 22.7325C2.97091 20.7622 1.98251 18.1636 1.84506 15.8988L1.80578 15.2508L4.02476 15.2638L6.24374 15.2835L6.28956 16.1802ZM14.5895 18.0654V20.88H14.2425C13.1298 20.88 10.7144 21.227 9.30057 21.5935L8.56091 21.7833L8.49545 21.6066C7.93252 20.1338 7.38923 17.2537 7.38923 15.722V15.2508H10.9894H14.5895V18.0654ZM22.9417 16.0493C22.8959 16.8414 22.7912 17.7381 22.7388 17.7905C22.7257 17.8036 21.9664 17.581 21.05 17.2865C20.1336 16.9919 19.1518 16.6843 18.8703 16.5926C17.9474 16.2981 17.3714 16.429 17.0375 16.9919C16.7823 17.4239 16.8215 17.7119 17.3714 19.44C17.6397 20.2844 17.8492 20.9782 17.8427 20.9848C17.8361 20.9913 17.3517 20.9651 16.7692 20.9259L15.7022 20.8538V18.0981C15.7022 16.5795 15.7219 15.3162 15.7481 15.2966C15.7677 15.2704 17.4107 15.2508 19.3874 15.2508H22.9876L22.9417 16.0493ZM28.5317 15.6173C28.5317 16.1279 28.3616 17.2341 28.1652 17.9803C28.0015 18.6152 27.779 19.3025 27.7135 19.3614C27.6939 19.3876 27.347 19.296 26.9411 19.1651C26.5353 19.0342 25.6844 18.7592 25.0364 18.5563L23.8712 18.1832L23.904 17.8428C23.9236 17.6596 23.976 17.0377 24.0218 16.4617C24.061 15.8857 24.1069 15.3751 24.12 15.3293C24.1396 15.2704 24.6371 15.2508 26.3389 15.2508H28.5317V15.6173ZM25.5469 19.8916C29.6118 21.1811 32.9632 22.2743 33.0024 22.3135C33.0482 22.3594 33.0482 22.4052 33.009 22.4444C32.9762 22.4706 31.3922 23.0663 29.4809 23.7667C25.7629 25.1282 25.6778 25.1674 25.4487 25.6911C25.3898 25.8351 24.8007 27.4257 24.1461 29.2258C23.485 31.0258 22.9221 32.5248 22.8959 32.5575C22.8566 32.5968 22.8108 32.5968 22.7716 32.5575C22.6995 32.4855 17.9932 17.7708 17.9932 17.6203C17.9932 17.581 18.0325 17.5417 18.0783 17.5417C18.1307 17.5417 21.4886 18.6021 25.5469 19.8916ZM14.5895 25.0365V28.0868L14.3473 28.041C12.881 27.7792 11.3363 26.6468 10.1711 24.9711C9.60822 24.166 8.92092 22.8568 9.03874 22.811C9.66713 22.595 11.5326 22.235 12.593 22.1303C13.7058 22.019 13.7451 22.0124 14.1836 22.0059L14.5895 21.9928V25.0365ZM17.6659 22.1303C17.967 22.1695 18.2289 22.2088 18.242 22.2219C18.2812 22.2612 19.826 27.1246 19.826 27.2097C19.826 27.2948 18.8769 27.6221 18.1438 27.7857C17.4892 27.9297 16.4419 28.0803 16.0492 28.0803H15.7022V25.0823C15.7022 23.4328 15.7219 22.0583 15.7546 22.0321C15.807 21.9797 16.7823 22.0255 17.6659 22.1303ZM8.82928 24.9711C9.19584 25.5733 9.75877 26.2998 10.3021 26.889L10.7472 27.3668L10.3021 27.1966C9.60822 26.9348 8.46272 26.3391 7.75579 25.8744C7.13395 25.4555 6.13901 24.6634 5.83137 24.3361L5.68736 24.1725L6.4532 23.8059C6.87867 23.603 7.37614 23.387 7.55288 23.315L7.88016 23.1972L8.21399 23.8583C8.39727 24.2183 8.67873 24.7223 8.82928 24.9711Z" fill="white"/>
            </svg>            
        ]]
    ),

    ['config'] = svgCreate(31, 33,
        [[
            <svg width="31" height="33" viewBox="0 0 31 33" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M8.50791 0.574775C7.5883 0.915102 5.74908 1.99401 5.19153 2.52985C4.66293 3.02224 4.605 3.4929 4.98878 4.31838C5.70564 5.88967 5.47392 7.54786 4.36605 8.76435C3.63471 9.56811 2.74406 9.99532 1.59999 10.0967C0.528317 10.1981 0.253158 10.5022 0.115579 11.7839C-0.014759 12.9424 0.0576511 14.6803 0.253158 15.2885C0.41246 15.7736 0.991741 16.114 1.66515 16.114C2.72958 16.114 4.05469 16.867 4.6919 17.8373C5.16256 18.547 5.33635 19.0683 5.37255 19.8793C5.416 20.6686 5.30738 21.2189 4.95981 21.9719C4.69914 22.5223 4.67741 22.9929 4.88016 23.3333C5.24221 23.9198 7.50141 25.3101 8.631 25.6431C8.93513 25.73 9.06546 25.7373 9.31166 25.6721C9.65199 25.578 9.84749 25.3969 10.3109 24.738C10.4919 24.4846 10.8395 24.1298 11.1074 23.9343C12.4832 22.8988 14.1921 22.8264 15.6982 23.7315L15.9734 23.8908L17.9429 21.9213L19.9125 19.9517L19.9197 18.9959C19.927 17.8808 20.0718 17.2436 20.4918 16.3964C21.2593 14.854 22.5772 13.7534 24.2571 13.2465C24.8364 13.0728 25.0246 13.051 25.9805 13.051C26.9001 13.0438 27.0449 13.0293 27.0449 12.9352C27.0449 12.5442 26.8856 11.1177 26.8277 10.9294C26.7408 10.6687 26.3642 10.285 26.0818 10.1836C25.966 10.1401 25.7343 10.1039 25.5605 10.1039C24.3657 10.1039 23.0189 9.35087 22.3093 8.27921C21.9038 7.66372 21.7372 7.13513 21.701 6.28069C21.6648 5.43349 21.73 5.1004 22.092 4.30389C22.5917 3.18878 22.4106 2.80501 20.9045 1.80575C20.2239 1.34956 18.6598 0.567534 18.305 0.502365C17.7329 0.39375 17.313 0.632703 16.864 1.31336C16.3499 2.08815 15.4448 2.7326 14.5541 2.97155C14.0038 3.10913 13.077 3.10913 12.5267 2.97155C11.6215 2.7326 10.6585 2.00849 10.043 1.10337C9.67371 0.553052 9.10167 0.357545 8.50791 0.574775ZM15.2058 8.10542C15.9589 8.3661 16.6902 8.82228 17.255 9.39432C17.7836 9.93016 17.914 10.1112 18.2398 10.7556C18.667 11.5883 18.7539 11.9794 18.7467 13.109C18.7467 14.0141 18.725 14.1879 18.5512 14.702C18.276 15.5347 17.8923 16.1429 17.2333 16.8019C16.2268 17.8084 15.1769 18.279 13.7866 18.3442C12.7946 18.3877 12.1139 18.2428 11.1871 17.8011C10.6006 17.5187 10.4123 17.3739 9.84749 16.8091C8.76858 15.723 8.29068 14.5934 8.29068 13.109C8.29068 10.6687 9.85473 8.64126 12.2153 8.00405C13.0191 7.78682 14.4166 7.83026 15.2058 8.10542Z" fill="white"/>
                <path d="M25.1046 14.0865C23.2219 14.4269 21.7158 15.723 21.1293 17.526C20.941 18.1125 20.8759 19.0321 20.9555 19.9735L20.9845 20.321L17.1105 24.2095C14.5183 26.809 13.1787 28.1993 13.0773 28.402C12.8528 28.8582 12.8166 29.2709 12.9614 29.7706C13.07 30.1616 13.1569 30.2702 13.8883 31.0015C14.54 31.646 14.7717 31.827 15.0541 31.9284C15.503 32.0732 15.8434 32.0732 16.2995 31.9284C16.6181 31.8198 17.0381 31.4287 20.6079 27.8662L24.5543 23.9271L25.387 23.9777C26.4876 24.0429 27.1973 23.9053 28.1313 23.4492C28.6961 23.174 28.9206 23.0075 29.4058 22.5223C29.8981 22.0299 30.0502 21.8199 30.3254 21.2479C30.5064 20.8714 30.6874 20.4152 30.7309 20.2269C30.8612 19.6766 30.9119 18.8222 30.825 18.7642C30.7816 18.7353 30.0212 19.1335 29.1378 19.6404C27.5303 20.5672 27.5303 20.5672 27.0017 20.589C26.0387 20.6396 25.3001 20.2197 24.8946 19.3942C24.4891 18.5615 24.6991 17.4681 25.3798 16.896C25.5318 16.7657 26.3139 16.2806 27.1104 15.8244C28.0951 15.2596 28.5586 14.9555 28.5441 14.883C28.5224 14.731 27.7186 14.3472 27.1321 14.1951C26.5383 14.0503 25.6115 13.9996 25.1046 14.0865Z" fill="white"/>
            </svg>                  
        ]]
    ),

    ['exit'] = svgCreate(33, 34,
        [[
            <svg width="33" height="34" viewBox="0 0 33 34" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M28.6714 0.173656C28.5814 0.205796 27.598 1.1507 26.4795 2.26915L24.4418 4.30037L24.2619 4.17181C23.8569 3.88256 22.9763 3.49046 22.3849 3.33619C21.8643 3.19477 21.6136 3.16906 20.8615 3.16263C19.8138 3.16263 19.1517 3.29762 18.2839 3.70258C17.429 4.09468 17.0112 4.42893 15.597 5.81736C14.1315 7.26364 13.9708 7.48219 14.0479 7.96428C14.0865 8.2214 14.395 8.53636 19.4345 13.5823C24.4804 18.6218 24.7954 18.9303 25.0525 18.9689C25.5282 19.046 25.7531 18.8853 27.1673 17.4519C28.5621 16.0313 28.9221 15.5814 29.3142 14.7393C29.7192 13.878 29.8541 13.2223 29.8541 12.1553C29.8477 10.8954 29.6099 10.0148 28.9928 8.99917L28.7293 8.56208L30.7862 6.50515C32.5474 4.73104 32.8431 4.40965 32.8817 4.20395C32.9781 3.69615 32.9395 3.64473 31.2169 1.90919C30.3298 1.01571 29.5135 0.244363 29.3978 0.19294C29.1599 0.0900932 28.9028 0.0836653 28.6714 0.173656ZM29.0121 5.57953L27.418 7.17365L26.6338 6.38944L25.8431 5.59881L27.4308 4.01112L29.0249 2.417L29.8092 3.2012L30.5998 3.99183L29.0121 5.57953ZM21.9864 5.21956C22.1792 5.27741 22.5713 5.43811 22.8542 5.58595C23.317 5.82379 23.5291 6.0102 25.0268 7.49504C25.946 8.39495 26.833 9.31414 27.0066 9.52626C28.0608 10.844 28.2472 12.5474 27.5015 14.0515C27.2637 14.54 27.1287 14.7072 26.2224 15.6263L25.2068 16.6548L20.7844 12.2324L16.362 7.81001L17.3904 6.7944C18.3225 5.87521 18.4768 5.75308 18.9653 5.51525C19.2674 5.37383 19.7173 5.20671 19.9616 5.15528C20.508 5.03315 21.4722 5.06529 21.9864 5.21956Z" fill="white"/>
                <path d="M10.8861 2.28203C10.4297 2.49416 10.3525 2.69985 10.3525 3.63832C10.3525 4.53823 10.4232 4.74392 10.8153 4.99461C11.0789 5.15531 11.5996 5.13603 11.8438 4.94962C12.1909 4.6925 12.2488 4.51252 12.2488 3.62547C12.2488 2.90554 12.2359 2.78984 12.1138 2.63557C11.786 2.19204 11.3489 2.06991 10.8861 2.28203Z" fill="white"/>
                <path d="M4.96565 4.73103C4.5414 4.99457 4.38713 5.52809 4.60568 5.9909C4.77281 6.33801 5.67272 7.16078 5.94269 7.2122C6.30265 7.27648 6.60476 7.19292 6.84902 6.94866C7.09328 6.7044 7.17685 6.40229 7.11257 6.04232C7.06114 5.77235 6.23837 4.87244 5.89126 4.70532C5.59558 4.5639 5.22276 4.57676 4.96565 4.73103Z" fill="white"/>
                <path d="M2.50328 10.5997C2.22046 10.7861 2.02762 11.2425 2.08547 11.5703C2.14975 11.8981 2.46472 12.2324 2.78611 12.3224C2.93395 12.3609 3.33891 12.3802 3.69887 12.3674C4.44451 12.3417 4.70163 12.2324 4.89447 11.8531C5.12587 11.4032 4.99088 10.8761 4.57307 10.5997C4.3738 10.4647 4.27739 10.4519 3.53818 10.4519C2.79254 10.4519 2.70255 10.4647 2.50328 10.5997Z" fill="white"/>
                <path d="M11.9592 11.4739C11.265 11.6989 11.0464 11.8596 9.72873 13.1709L8.43029 14.4565L8.26316 14.3215C8.00605 14.1158 7.64609 14.0836 7.31826 14.2315C6.97116 14.3858 4.52855 16.8476 4.12359 17.4519C3.72506 18.0368 3.37153 18.8274 3.2044 19.4895C3.01799 20.2287 3.00514 21.6236 3.17226 22.3049C3.32653 22.9156 3.60936 23.6034 3.92433 24.1176L4.18787 24.5547L2.13094 26.6116C0.324698 28.4243 0.0740099 28.7071 0.0290146 28.9193C-0.0609762 29.4271 0.0161587 29.5299 1.78383 31.2912C3.19155 32.6924 3.4808 32.9431 3.68007 32.9817C4.20073 33.0781 4.20715 33.0717 6.41193 30.8798L8.47529 28.8164L8.6617 28.945C9.06023 29.2342 9.96013 29.6263 10.5258 29.7742C12.2999 30.2241 14.0547 29.9156 15.591 28.8807C16.1695 28.4886 18.6314 26.0396 18.7856 25.7053C18.9271 25.3839 18.8949 25.0497 18.6957 24.7668L18.5671 24.5804L19.8527 23.2884C20.7333 22.3949 21.1833 21.8871 21.299 21.6686C21.7682 20.7365 21.7875 19.7852 21.3697 18.8917C21.1704 18.4739 20.5919 17.8375 20.2062 17.6061C19.287 17.0726 18.0014 17.0662 17.1015 17.5997C16.9794 17.6768 16.2916 18.3196 15.5717 19.0267L14.2733 20.3187L13.4891 19.5281L12.6984 18.7439L13.9904 17.4454C14.6975 16.7255 15.3403 16.0377 15.4174 15.9156C15.9381 15.035 15.9509 13.7687 15.4431 12.8945C15.2053 12.4831 14.6911 11.956 14.3054 11.7375C13.6369 11.3582 12.6663 11.2425 11.9592 11.4739ZM13.2898 13.383C13.7333 13.6015 13.9647 14.1094 13.8554 14.675C13.8169 14.8807 13.624 15.1057 12.5827 16.1599L11.355 17.394L10.5644 16.6098L9.77372 15.8192L10.8472 14.7393C11.445 14.1415 12.0556 13.5694 12.2099 13.4666C12.5442 13.248 12.9363 13.2223 13.2898 13.383ZM12.152 20.8972L16.5552 25.3068L15.5267 26.3224C14.5947 27.2416 14.4468 27.3637 13.9519 27.6015C13.2384 27.9422 12.4992 28.0965 11.7985 28.0386C11.1429 27.9936 10.7122 27.8651 10.063 27.5308C9.60017 27.293 9.38805 27.1066 7.89035 25.6217C6.02625 23.7898 5.69843 23.4041 5.37061 22.7163C4.93994 21.8164 4.84352 20.6915 5.11992 19.7723C5.35132 18.9753 5.63415 18.5768 6.6819 17.5033C7.22827 16.9505 7.69108 16.4941 7.71036 16.4941C7.72965 16.4941 9.72873 18.4739 12.152 20.8972ZM19.1392 19.2324C19.6406 19.4767 19.8912 20.1837 19.6406 20.6787C19.5184 20.9165 17.3137 23.1791 17.198 23.1791C17.1594 23.1791 16.793 22.8385 16.3752 22.4206L15.6231 21.6686L16.7994 20.4987C17.4422 19.8559 18.0593 19.2838 18.1621 19.2324C18.4128 19.0974 18.8564 19.1038 19.1392 19.2324ZM5.48631 29.1057L3.89219 30.6998L3.10798 29.9156L2.31735 29.1249L3.90504 27.5373L5.49916 25.9431L6.28337 26.7273L7.074 27.518L5.48631 29.1057Z" fill="white"/>
                <path d="M28.6011 20.8008C27.7912 21.0451 27.6433 22.0993 28.3633 22.5364C28.5432 22.6456 28.6911 22.6649 29.3789 22.6649C30.3366 22.6649 30.5295 22.5878 30.7352 22.1121C30.973 21.5786 30.6966 20.9551 30.1631 20.8008C29.8867 20.7301 28.8453 20.7237 28.6011 20.8008Z" fill="white"/>
                <path d="M26.3063 25.9882C25.9207 26.1746 25.7214 26.6052 25.805 27.0681C25.8564 27.3445 26.6792 28.2444 27.0263 28.4115C27.8683 28.81 28.7104 27.968 28.3119 27.1323C28.1897 26.8688 27.3348 26.0332 27.1034 25.9432C26.8527 25.8532 26.5506 25.866 26.3063 25.9882Z" fill="white"/>
                <path d="M21.1443 28.1351C20.7715 28.3536 20.6751 28.5786 20.6494 29.3178C20.6172 30.1149 20.6944 30.4363 20.9836 30.687C21.2857 30.9505 21.6393 31.0019 22.0121 30.8348C22.4878 30.6291 22.5649 30.4363 22.5649 29.4785C22.5649 28.7907 22.5456 28.6429 22.4363 28.4629C22.1664 28.0194 21.6007 27.8716 21.1443 28.1351Z" fill="white"/>
            </svg>                           
        ]]
    ),

}

function render ()

    cursor.state = isCursorShowing ();
    if (cursor.state) then
        local cursorX, cursorY = getCursorPosition ();
        cursor.x, cursor.y = cursorX * screenW, cursorY * screenH;
    end
    local alpha = interpolateBetween(effect[1], 0, 0, effect[2], 0, 0, ((getTickCount()-effect[3])/effect[4]), 'Linear')
    animationY = interpolateBetween(animation[1], 0, 0, animation[2], 0, 0, ((getTickCount()-animation[3])/animation[4]), 'InOutQuad')

    _dxDrawRectangle(0, 0, screenW, screenH, tocolor(23, 23, 23, alpha * 0.95))
    
    dxDrawRounded(0, 0, 328, 168, 2.4, tocolor(47, 47, 47, alpha * 0.98))

    linha = 0
    for i, v in ipairs(config.options) do
        if linha < 3 then
            linha = linha + 1
            local py = 8.7 + ((48.51+1.79) * (linha - 1))
            dxDrawRounded(8.13, py, 312.07, 48.51, 2, isMouseInPosition(8.13, py, 312.07, 48.51) and tocolor(14, 158, 247, alpha) or tocolor(53, 53, 53, alpha * 0.98))
            dxDrawText(v.title, 64.32, py+7.76, 60, 19, isMouseInPosition(8.13, py, 312.07, 48.51) and tocolor(255, 255, 255, alpha) or tocolor(210, 210, 210, alpha), 1, getFont('medium', 13), 'left', 'center')
            dxDrawText(v.description, 64.32, py+26.76, 60, 14, isMouseInPosition(8.13, py, 312.07, 48.51) and tocolor(221, 221, 221, alpha) or tocolor(123, 123, 123, alpha), 1, getFont('regular', 11), 'left', 'center')
            dxDrawImage(19, py+48.51/2-v.item.size[2]/2, v.item.size[1], v.item.size[2], svg[v.item.icon], 0, 0, 0, isMouseInPosition(8.13, py, 312.07, 48.51) and tocolor(255, 255, 255, alpha) or tocolor(86, 86, 86, alpha))
        end
    end

    dxDrawRounded(0, 172, 328, 38, 2.2, isMouseInPosition(0, 172, 328, 38) and tocolor(12, 156, 245, alpha * 0.8) or tocolor(14, 158, 247, alpha))
    dxDrawImage(284.25, 181.34, 25, 18, svg['joystick'], 0, 0, 0, tocolor(255, 255, 255, alpha))
    dxDrawText('Voltar ao jogo', 12, 183, 68, 18, tocolor(210, 210, 210, alpha), 1, getFont('medium', 13), 'left', 'center')

end

function click (button, state)
    if button == 'left' and state == 'down' then
        if isMouseInPosition(0, 172, 328, 38) then
            panelState()
        else
            linha = 0
            for i, v in ipairs(config.options) do
                if linha < 3 then
                    linha = linha + 1
                    local py = 8.7 + ((48.51+1.79) * (linha - 1))
                    if isMouseInPosition(8.13, py, 312.07, 48.51) then
                        if v.item.icon == 'config' then
                            executeCommandHandler('antlag')
                            panelState()
                        elseif v.item.icon == 'exit' then
                            triggerServerEvent('Caio.exitEsc', localPlayer, localPlayer)
                        elseif v.item.icon == 'website' then
                            setClipboard(config.website)
                            playSoundFrontEnd(1)
                        end
                    end
                end
            end
        end
    end
end

function panelState ()
    if not visible then
        selectAntigo = nil
        effect = {0, 255, getTickCount(), 150}
        animation = {150, 0, getTickCount(), 150}
        visible = true
        showCursor(true)
        showChat(false)
        addEventHandler('onClientRender', root, render)
        addEventHandler('onClientClick', root, click)
    else
        if not closing then
            showChat(true)
            showCursor(false)
            removeEventHandler('onClientClick', root, click)
            closing = true
            effect = {255, 0, getTickCount(), 150}
            animation = {0, -150, getTickCount(), 150}
            setTimer(function ()
                closing = false
                visible = false
                removeEventHandler('onClientRender', root, render)
            end, effect[4] + 50, 1)
        end
    end
end

addEventHandler('onClientKey', root, function (button, press)
    if button == 'escape' and press then
        panelState()
        cancelEvent()
    end
end)

bindKey ('backspace', 'down', function ()
    if visible then
        return panelState ()
    end
end)